package dynamicprogramming;

import java.util.ArrayList;
import java.util.List;

/**
 * Given a length n, return the number of strings of length n that can be made
 * up of the letters 'a', 'b', and 'c', where there can only be a maximum of 1
 * 'b's and can only have up to two consecutive 'c's
 * 
 * Example: findStrings(3) returns 19 since the possible combinations are:
 * aaa,aab,aac,aba,abc,aca,acb,baa,bac,bca,caa,cab,cac,cba,cbc,acc,bcc,cca,ccb
 * and the invalid combinations are: abb,bab,bba,bbb,bbc,bcb,cbb,ccc
 * 
 * 
 * @author nagendra
 *
 */
public class GenerateWordsMax21b {

	public static void main(String a[]) {
		System.out.println();
		int n = 3;
		System.out.println(generateWords(3));
		System.out.println(generateWords(4));
		System.out.println(generateWords(5));
		generateWords2(3);
		generateWords2(4);
		generateWords2(5);

		char[] chars = { 'a', 'b', 'c' };
		int size = 3;
		List<String> list = new ArrayList<>();
		// generateAllWords(chars, size, "", list);
	}

	/**
	 * O(n) solution is provided.
	 * 
	 * We can divide strings in two types; A type which does not contain ‘b’ and
	 * B type which contain ‘b’. We can define matrix A and B as follows.
	 * 
	 * A[i]: the number of strings of length i in A type. B[i]: the number of
	 * strings of length i in B type.
	 * 
	 * And the answer is A[n] + B[n]
	 * 
	 * Because B type strings with lengh i can be generated by picking any sting
	 * in A type strings with length i-1, and put ‘b’ in any position in the
	 * string. There are total i positions to insert ‘b’, thus, following
	 * equation holds between A[i] and B[i].
	 * 
	 * B[i] = i * A[i-1]
	 * 
	 * So, it is enough to compute A[i]. For considering strings in A, there are
	 * three possible prefixes which end with ‘a’. (because there is no
	 * constraint in the substring after ‘a’) <br>
	 * 1. ‘a’ + A type strings with length i - 1 <br>
	 * 2. ‘ca’ + A type strings with length i - 2 <br>
	 * 3. ‘cca’ + A type strings with length i - 3 <br>
	 * 
	 * i.e., A[i] = A[i-1] + A[i-2] + A[i-3] where A[1] = 2, A[2] = 4, A[3] = 7
	 * 
	 * We can compute matrix A iteratively.
	 * 
	 * As an example, the number of strings of length 3 is A[3] + B[3] = A[3] +
	 * 3 * A[2] = 7 + 3*4 = 19.
	 * 
	 * https://careercup.appspot.com/question?id=5717453712654336
	 * 
	 * @param n
	 * @return
	 */
	private static long generateWords(int n) {
		List<Long> list = new ArrayList<>();
		list.add(0l); // A[0]
		list.add(2l); // A[1]
		list.add(4l); // A[2]
		list.add(7l); // A[3]
		for (int i = 4; i <= n; i++) {
			long value = list.get(i - 1) + list.get(i - 2) + list.get(i - 3);
			list.add(value);
		}

		return list.get(n) + n * list.get(n - 1);

	}

	private static void generateWords2(int n) {
		// generate all possible strings

		char[] chars = { 'a', 'b', 'c' };

		List<String> list = new ArrayList<>();
		generateAllWords(chars, n, "", list);

		int count = 0;
		for (String s : list) {
			if (isValid(s)) {
				count++;
			}
		}

		System.out.println(count);
	}

	private static void generateAllWords(char[] chars, int size, String s, List<String> list) {
		if (size == 0) {
			list.add(s);
			return;
		}
		for (char x : chars) {
			String s1 = s + x;
			generateAllWords(chars, size - 1, s1, list);

		}
	}

	private static boolean isValid(String s) {
		String str = s.replaceFirst("b", "").replaceFirst("c", "").replaceFirst("c", "");
		return !(str.contains("c") || str.contains("b"));
	}
}
